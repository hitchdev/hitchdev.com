<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HitchStory on HitchDev</title>
    <link>https://hitchdev.com/hitchstory/</link>
    <description>Recent content in HitchStory on HitchDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hitchdev.com/hitchstory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Abort a story with ctrl-C</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/aborting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/aborting/</guid>
      <description>When an in-progress story is hit with any of the following termination signals:
 SIGTERM SIGINT SIGQUIT SIGHUP  Then it triggers the tear_down method of the engine.
In practical terms this means that if you are running a series of stories, Ctrl-C should halt current execution, run tear_down and then not run any more stories.
example.story:
Createfiles:steps:-PauseforeverShouldneverrun:steps:-Shouldnothappen engine.py:
from hitchstory import BaseEngine from code_that_does_things import reticulate_splines import psutil class Engine(BaseEngine): def pause_forever(self): psutil.</description>
    </item>
    
    <item>
      <title>Arguments to steps</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/steps-and-step-arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/steps-and-step-arguments/</guid>
      <description>Arguments are fed to steps in a way that is largely consistent with how python methods work:
 Named arguments (e.g. &amp;ldquo;How many times&amp;rdquo;) are put in equivalent named variables (e.g. &amp;ldquo;how_many_times&amp;rdquo;). If the method has **kwargs then the key names of kwargs will match the named arguments exactly (i.e. no underscores).  engine.py:
from code_that_does_things import * from strictyaml import Int, Str, Bool from hitchstory import BaseEngine, validate class Engine(BaseEngine): def fill_form(self, **kwargs): for name, content in kwargs.</description>
    </item>
    
    <item>
      <title>Continue on failure when playing multiple stories</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/continue-on-failure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/continue-on-failure/</guid>
      <description>By default whenever stories are played in sequence, they stop when the first failure is encountered.
However, if your stories take a long time to run you may wish to continue after the first failure.
example1.story:
ACreatefile:steps:-CreatefileBCreatefile:steps:-Fail example2.story:
CCreatefileathirdtime:steps:-Createfilefrom hitchstory import StoryCollection, BaseEngine from pathquery import pathquery class Engine(BaseEngine): def create_file(self, filename=&amp;#34;step1.txt&amp;#34;, content=&amp;#34;example&amp;#34;): with open(filename, &amp;#39;w&amp;#39;) as handle: handle.write(content) def fail(self): raise Exception(&amp;#34;Error&amp;#34;) Stop on failure is default behavior:
StoryCollection( pathquery(&amp;#34;.</description>
    </item>
    
    <item>
      <title>Extra story metadata - e.g. adding JIRA ticket numbers to stories</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/metadata/</guid>
      <description>Each and every story is related to issues on issue trackers, specialist documentation, people, external resources and much more.
The best place to document this additional metadata is not buried in word documents on company wikis but within the story itself.
What kind of metadata you add to stories is up to you - simply add the names of the properties you want to add in the info parameter of your engine InfoDefinition and specify the structure of the metadata using StrictYAML validators inside the InfoProperty object.</description>
    </item>
    
    <item>
      <title>Flaky story detection</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/flaky-story-detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/flaky-story-detection/</guid>
      <description>Dealing with flaky stories, especially with higher level integration tests is a constant battle.
These examples show how flaky stories can be detected by rerunning stories several times and checking that the result is the same. This kind of regression testing can be usefully run separately from normal regression testing in order to get separate feedback about problematic tests in a &amp;lsquo;flake&amp;rsquo; report.
This cannot detect all kinds of flakiness, but it can be effective at detecting flakiness caused by, for example:</description>
    </item>
    
    <item>
      <title>Generate documentation from stories</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/generate-documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/generate-documentation/</guid>
      <description>hitchstory YAML stories are designed to be readable, but also terse and easy to maintain.
Where terseness and ease of maintenance trumps readability, the former take precedence. YAML stories are not intended to be a replacement for stakeholder documentation in and of themselves.
YAML stories are designed, however, to be used to generate documentation for use by stakeholders.
The example shown below demonstrates how a story can be transformed into markdown via jinja2.</description>
    </item>
    
    <item>
      <title>Given preconditions</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/given/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/given/</guid>
      <description>Stories are comprised of preconditions followed by steps.
Hitchstory lets you define preconditions using the &amp;lsquo;given&amp;rsquo; keyword in YAML and then use them using self.given[&amp;lsquo;property name&amp;rsquo;].
The given property names need to first be specified in the engine using GivenDefinition and GivenProperty.
By default, given properties will parse without a StrictYAML schema, but you can also specify your own StrictYAML schema.
The following example shows a browser precondition being used to set up a mock selenium object.</description>
    </item>
    
    <item>
      <title>Gradual typing of story steps</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/gradual-typing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/gradual-typing/</guid>
      <description>In order to speed up prototyping and development of a story suite, the structure of your YAML data specified in preconditions, parameters and step arguments need not be specified in advance.
All data that is parsed without a validator is parsed either as a dict, list or string, as per the StrictYAML spec.
When your story suite matures and the structure of your story files has solidified, you can specify validators that fail fast when YAML snippets with an invalid structure are used.</description>
    </item>
    
    <item>
      <title>Handling failing tests</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/failing-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/failing-tests/</guid>
      <description>By default, a failing story will show:
 A snippet of the YAML where the story failed with the failing step highlighted. A stack trace from engine.py where the exception was raised.  example.story:
Failingstory:steps:-Passingstep-Failingstep-Notexecutedstep engine.py:
from hitchstory import BaseEngine, no_stacktrace_for, Failure from code_that_does_things import raise_example_exception, output, ExampleException class Engine(BaseEngine): def passing_step(self): pass def failing_step(self): raise_example_exception(&amp;#34;Towel not located&amp;#34;) @no_stacktrace_for(ExampleException) def failing_step_without_stacktrace(self): raise_example_exception(&amp;#34;Expected exception&amp;#34;) def raise_special_failure_exception(self): raise Failure(&amp;#34;Special failure exception - no stacktrace printed!</description>
    </item>
    
    <item>
      <title>Hiding stacktraces for expected exceptions</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/expected-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/expected-exceptions/</guid>
      <description>For common expected failures where you do not want to see the whole stacktrace, apply the &amp;ldquo;@no_stacktrace_for&amp;rdquo; decorator.
example.story:
Failingstory:steps:-Failingstepwithoutstacktrace engine.py:
from hitchstory import BaseEngine, no_stacktrace_for, Failure from code_that_does_things import raise_example_exception, output, ExampleException class Engine(BaseEngine): def passing_step(self): pass def failing_step(self): raise_example_exception(&amp;#34;Towel not located&amp;#34;) @no_stacktrace_for(ExampleException) def failing_step_without_stacktrace(self): raise_example_exception(&amp;#34;Expected exception&amp;#34;) def raise_special_failure_exception(self): raise Failure(&amp;#34;Special failure exception - no stacktrace printed!&amp;#34;) def step_that_will_not_run(self): pass def on_failure(self, result): pass def not_executed_step(self): passfrom hitchstory import StoryCollection from engine import Engine from pathquery import pathquery story_collection = StoryCollection(pathquery(&amp;#34;.</description>
    </item>
    
    <item>
      <title>Inherit one story from another</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/inheritance/</guid>
      <description>You can break most software down into a series of individual linear behavioral stories.
However, software stories naturally branch. In order to send an email or delete an email you must first always log in.
While it would be possible to write out each individual story for every possible branch, this would result in a story suite that is WET instead of DRY and that creates a maintenance headache.
Story inheritance allows you to base stories on other stories.</description>
    </item>
    
    <item>
      <title>Play multiple stories in sequence</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/play-multiple-stories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/play-multiple-stories/</guid>
      <description>Running multiple stories in sequence is necessary when you want to do a regression sweep to make sure nothing has broken.
By default hitchstory will stop when it sees its first failure. This behavior can be changed though.
Example base.story:
Basestory:given:randomvariable:somevalue example1.story:
Createfile:basedon:basestorysteps:-CreatefileCreatefileagain:basedon:basestorysteps:-Createfile example2.story:
Createfiles:basedon:basestorysteps:-Createfilefrom hitchstory import StoryCollection, BaseEngine, GivenDefinition, GivenProperty from pathquery import pathquery from ensure import Ensure class Engine(BaseEngine): given_definition=GivenDefinition( random_variable=GivenProperty() ) def create_file(self, filename=&amp;#34;step1.txt&amp;#34;, content=&amp;#34;example&amp;#34;): with open(filename, &amp;#39;w&amp;#39;) as handle: handle.</description>
    </item>
    
    <item>
      <title>Running a single named story successfully</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/run-single-named-story/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/run-single-named-story/</guid>
      <description>How a story runs when it is successful - i.e. when no exception is raised during its run.
example.story:
Createfiles:steps:-Createfile-Createfile:step2.txt-Createfile:filename:step3.txtcontent:thirdstep engine.py:
from hitchstory import BaseEngine class Engine(BaseEngine): def create_file(self, file_name=&amp;#34;step1.txt&amp;#34;, content=&amp;#34;example&amp;#34;): with open(file_name, &amp;#39;w&amp;#39;) as handle: handle.write(content) def on_success(self): print(&amp;#34;splines reticulated&amp;#34;) with open(&amp;#34;ranstory.txt&amp;#34;, &amp;#39;w&amp;#39;) as handle: handle.write(self.story.name)from hitchstory import StoryCollection from pathquery import pathquery from engine import EngineStoryCollection(pathquery(&amp;#34;.&amp;#34;).ext(&amp;#34;story&amp;#34;), Engine()).named(&amp;#34;Create files&amp;#34;).play() Will output:
RUNNING Create files in /path/to/example.story ... splines reticulated SUCCESS in 0.</description>
    </item>
    
    <item>
      <title>Shortcut lookup for story names</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/shortcut-lookup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/shortcut-lookup/</guid>
      <description>Hunting for and specifying particular story to run can be a pain.
Using the &amp;lsquo;shortcut&amp;rsquo; function you can select a specific story to run just by specifying one or more key words that appear in the story title. The case is ignored, as are special characters.
If you specify key words that match no stories or more than one story, an error is raised.
example1.story:
Createfile:steps:-CreatefileCreatefileagain:steps:-Createfile example2.story:
Createfiles:steps:-Createfilefrom hitchstory import StoryCollection, BaseEngine from ensure import Ensure from pathquery import pathquery class Engine(BaseEngine): def create_file(self, filename=&amp;#34;step1.</description>
    </item>
    
    <item>
      <title>Special exception named failure</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/special-failure-exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/special-failure-exception/</guid>
      <description>If you want to indicate a test failure, raise the &amp;ldquo;Failure&amp;rdquo; exception.
This is by default an expected exception, so no stack trace will be printed if it is raised.
example.story:
Failingstory:steps:-Raisespecialfailureexception-Stepthatwillnotrun-Stepthatwillnotrun engine.py:
from hitchstory import BaseEngine, no_stacktrace_for, Failure from code_that_does_things import raise_example_exception, output, ExampleException class Engine(BaseEngine): def passing_step(self): pass def failing_step(self): raise_example_exception(&amp;#34;Towel not located&amp;#34;) @no_stacktrace_for(ExampleException) def failing_step_without_stacktrace(self): raise_example_exception(&amp;#34;Expected exception&amp;#34;) def raise_special_failure_exception(self): raise Failure(&amp;#34;Special failure exception - no stacktrace printed!&amp;#34;) def step_that_will_not_run(self): pass def on_failure(self, result): pass def not_executed_step(self): passfrom hitchstory import StoryCollection from engine import Engine from pathquery import pathquery story_collection = StoryCollection(pathquery(&amp;#34;.</description>
    </item>
    
    <item>
      <title>Story that rewrites itself</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/rewrite-story/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/rewrite-story/</guid>
      <description>Hitch stories can be partially rewritten when the code is changed when a step involves verifying a block of text.
It is a time saver when you only want to make modifications to messages output by a program and ensure that those modifications are verified.
Instead of manually constructing the exact output you are expecting you can simply visually inspect the output to verify that it is the desired output.</description>
    </item>
    
    <item>
      <title>Story with parameters</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/parameterized-stories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/parameterized-stories/</guid>
      <description>Parameterized stories are used to describe stories which are essentially the same except for one or more variables which can vary.
A common example is a story for a user to log in with a browser which may be done with a number of different browsers.
Parameters can be used in preconditions and in steps by surrounding the parameter name with (( brackets )).
example.story:
Clickmagicbutton:with:browser:name:firefoxversion:37given:browser:((browser))steps:-Clickonbutton-Savescreenshot:forbrowser:((browser))variations:withchrome:with:browser:name:chromeversion:153 engine.py:
from hitchstory import BaseEngine, GivenDefinition, GivenProperty, validate from strictyaml import Map, Seq, Int, Str, Optional from code_that_does_things import * class Engine(BaseEngine): given_definition=GivenDefinition( browser=GivenProperty( schema=Map({&amp;#34;name&amp;#34;: Str(), &amp;#34;version&amp;#34;: Int()}), ), ) def set_up(self): print(self.</description>
    </item>
    
    <item>
      <title>Strong typing</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/strong-typing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/strong-typing/</guid>
      <description>By default all specified given properties and step arguments accept any kind of YAML which will always be parsed to a string or a nested combination of lists, dicts and strings.
In order to restrict what kind of YAML is allowed and/or to parse strings as something else (e.g. integers), you can use the validator decorator on step methods or the schema parameter on the GivenProperty object.
The &amp;lsquo;mini-schemas&amp;rsquo; you feed these objects should be standard StrictYAML validator objects.</description>
    </item>
    
    <item>
      <title>Variations</title>
      <link>https://hitchdev.com/hitchstory/using/alpha/variations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/hitchstory/using/alpha/variations/</guid>
      <description>Some stories are very similar except for a few changed items. You can create substories within the same story in order to enumerate all of the possible permutations.
This works in the same way as inheritance.
example.story:
Createfiles:given:content:doghierarchicalcontent:x:1y:-42steps:-Dothingwithprecondition-Dootherthing:dog-Doyetanotherthing-Doafourththing:animals:pondanimal:frogvariations:cat:given:content:catfrom hitchstory import StoryCollection, BaseEngine, GivenDefinition, GivenProperty, validate from strictyaml import Map, Seq, Int, Str, Optional from pathquery import pathquery from ensure import Ensure class Engine(BaseEngine): given_definition=GivenDefinition( content=GivenProperty(schema=Str()), hierarchical_content=GivenProperty( schema=Map({&amp;#34;x&amp;#34;: Int(), &amp;#34;y&amp;#34;: Seq(Str())}) ), ) def do_other_thing(self, parameter): assert type(parameter) is str print(parameter) def do_thing_with_precondition(self): assert type(self.</description>
    </item>
    
  </channel>
</rss>
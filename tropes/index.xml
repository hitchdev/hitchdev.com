<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tropes on HitchDev</title>
    <link>https://hitchdev.com/tropes/</link>
    <description>Recent content in Tropes on HitchDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hitchdev.com/tropes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Mirror Test</title>
      <link>https://hitchdev.com/tropes/mirror-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/tropes/mirror-tests/</guid>
      <description>The mirror test is a kind of test which mirrors the implementation of the code rather than testing the behavior. They are most typically unit tests.
How do you know if you&amp;rsquo;ve got a mirror test? A key defining feature of a mirror test is that it fails when the code under test has changed irrespective of whether or not there is a bug.
Mirror tests not only impose a cost in terms of the cost to build, they also impose an ongoing maintenance cost as changes to the code</description>
    </item>
    
    <item>
      <title>The Unit Test Paradox</title>
      <link>https://hitchdev.com/tropes/unit-test-paradox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/tropes/unit-test-paradox/</guid>
      <description>The unit test paradox is the paradox that low level unit testing &amp;ldquo;drives&amp;rdquo; good design by itself being a form of bad design.
Low level unit tests tightly couple to code All tests couple to something - end to end tests couple to the body of the architecture as a whole. Lower level integration tests couple to lower level implementation details.
The lower the level of the testing, the tighter it couples to the implementation.</description>
    </item>
    
  </channel>
</rss>
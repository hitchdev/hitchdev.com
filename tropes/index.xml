<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tropes on HitchDev</title>
    <link>https://hitchdev.com/tropes/</link>
    <description>Recent content in Tropes on HitchDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hitchdev.com/tropes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code coveragism</title>
      <link>https://hitchdev.com/tropes/code-coveragism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/tropes/code-coveragism/</guid>
      <description>Code coveragism is a form of [goodharting] whereby if higher code coverage is treated as the most important or even the only test quality target it becomes a bad measure.
Code coveragism will often cause poor quality tests to be written, [reflective tests], [tightly coupled tests] as well as tests covering [zombie code].
Pushing for code coverage is the act of intentionally ramping up code coverage to anywhere between 60-100% in an attempt to ensure a better tested system.</description>
    </item>
    
    <item>
      <title>Goodhart&#39;s Tests</title>
      <link>https://hitchdev.com/tropes/goodharts-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/tropes/goodharts-tests/</guid>
      <description>Goodhart&amp;rsquo;s tests are tests which are written for the purpose of increasing test coverage. They are named as such after goodhart&amp;rsquo;s law:
&amp;ldquo;A measure that becomes a target ceases to be a good measure&amp;rdquo;
Once code coverage percentage becomes an aim, the temptation to write [mimetic tests] and [paper thin tests] often grows uncontrollably.</description>
    </item>
    
    <item>
      <title>Mimetic Tests</title>
      <link>https://hitchdev.com/tropes/mimetic-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/tropes/mimetic-tests/</guid>
      <description>A mimetic is a kind of test which mimics the implementation of the code rather than testing the behavior. They are a common form of unit test.
How do you know if you&amp;rsquo;ve got a mimetic test? A fully mimetic test fails when 100% of the failures of the test are caused by code being changed rather than the presence of a bug or lack of desired functionality.
Note that flakiness is different to mimeticism.</description>
    </item>
    
    <item>
      <title>The Unit Test Paradox</title>
      <link>https://hitchdev.com/tropes/unit-test-paradox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/tropes/unit-test-paradox/</guid>
      <description>The unit test paradox is the paradox that low level unit testing &amp;ldquo;drives&amp;rdquo; good design by itself being a form of bad design.
Low level unit tests tightly couple to code All tests couple to something - end to end tests couple to the body of the architecture as a whole. Lower level integration tests couple to lower level implementation details.
The lower the level of the testing, the tighter it couples to the implementation.</description>
    </item>
    
  </channel>
</rss>
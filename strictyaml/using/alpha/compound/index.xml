<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compound StrictYAML Validators on HitchDev</title>
    <link>https://hitchdev.com/strictyaml/using/alpha/compound/</link>
    <description>Recent content in Compound StrictYAML Validators on HitchDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hitchdev.com/strictyaml/using/alpha/compound/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fixed length sequences (FixedSeq)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/fixed-length-sequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/fixed-length-sequences/</guid>
      <description>Sequences of fixed length can be validated with a series of different (or the same) types.
from strictyaml import FixedSeq, Str, Map, Int, Float, YAMLValidationError, load from ensure import Ensure schema = FixedSeq([Int(), Map({&amp;#34;x&amp;#34;: Str()}), Float()]) Equivalent list:
-1-x:5-2.5Ensure(load(yaml_snippet, schema)).equals([1, {&amp;#34;x&amp;#34;: &amp;#34;5&amp;#34;}, 2.5, ]) Invalid list 1:
a:1b:2c:3load(yaml_snippet, schema)strictyaml.exceptions.YAMLValidationError: when expecting a sequence of 3 elements in &amp;#34;&amp;lt;unicode string&amp;gt;&amp;#34;, line 1, column 1: a: &amp;#39;1&amp;#39; ^ (line: 1) found a mapping in &amp;#34;&amp;lt;unicode string&amp;gt;&amp;#34;, line 3, column 1: c: &amp;#39;3&amp;#39; ^ (line: 3) Invalid list 2:</description>
    </item>
    
    <item>
      <title>Mapping with defined keys and a custom key validator (Map)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/mapping-with-slug-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/mapping-with-slug-keys/</guid>
      <description>Experimental
This feature is in alpha. The API may change on a minor version increment.
 A typical mapping except that the key values are determined by the value provided by the validator.
Example yaml_snippet:
Name:UnitedKingdomcountry-code:GBDIALCODE:+44officiallanguages:-English-Welshfrom collections import OrderedDict from strictyaml import Map, Optional, Str, Seq, load, ScalarValidator from ensure import Ensure # This example uses slugify from the &amp;#34;python-slugify&amp;#34; package from slugify import slugify class Slug(ScalarValidator): def validate_scalar(self, chunk): return slugify(unicode(chunk.</description>
    </item>
    
    <item>
      <title>Mappings with arbitrary key names (MapPattern)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/map-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/map-pattern/</guid>
      <description>When you do not wish to let the user define the key names in a mapping and and only specify what type the keys are, use a MapPattern.
When you wish to specify the exact key name, use the &amp;lsquo;Map&amp;rsquo; validator instead.
from strictyaml import MapPattern, Int, Float, Str, YAMLValidationError, load from ensure import Ensure schema = MapPattern(Str(), Int()) Equivalence 1:
창:1b:2Ensure(load(yaml_snippet, schema)).equals({u&amp;#34;창&amp;#34;: 1, &amp;#34;b&amp;#34;: 2}) Equivalence 2:
a:1c:3Ensure(load(yaml_snippet, schema)).equals({&amp;#34;a&amp;#34;: 1, &amp;#34;c&amp;#34;: 3}) Equivalence 3:</description>
    </item>
    
    <item>
      <title>Mappings with defined keys (Map)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/mapping/</guid>
      <description>Mappings of one value to another are represented by : in YAML and parsed as python dicts.
Using StrictYAML&amp;rsquo;s &amp;lsquo;Map&amp;rsquo; you can validate that a mapping contains the right keys and the right type of values.
Note: for mappings where you don&amp;rsquo;t know the exact names of the keys in advance but you do know the type, use MapPattern.
Example yaml_snippet:
창:1b:2c:3from collections import OrderedDict from strictyaml import Map, Int, load, as_document from collections import OrderedDict from ensure import Ensure schema = Map({&amp;#34;a&amp;#34;: Int(), &amp;#34;b&amp;#34;: Int(), &amp;#34;c&amp;#34;: Int()}) schema_2 = Map({u&amp;#34;창&amp;#34;: Int(), &amp;#34;b&amp;#34;: Int(), &amp;#34;c&amp;#34;: Int()}) one key mapping:</description>
    </item>
    
    <item>
      <title>Optional keys with defaults (Map/Optional)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/optional-keys-with-defaults/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/optional-keys-with-defaults/</guid>
      <description>Experimental
This feature is in alpha. The API may change on a minor version increment.
 Example yaml_snippet:
a:1from strictyaml import Map, Int, Str, Bool, Optional, load, as_document from collections import OrderedDict from ensure import Ensure schema = Map({&amp;#34;a&amp;#34;: Int(), Optional(&amp;#34;b&amp;#34;, default=False): Bool(), }) When parsed the result will include the optional value:
Ensure(load(yaml_snippet, schema).data).equals(OrderedDict([(&amp;#34;a&amp;#34;, 1), (&amp;#34;b&amp;#34;, False)])) If parsed and then output to YAML again the default data won&amp;rsquo;t be there:</description>
    </item>
    
    <item>
      <title>Sequence/list validator (Seq)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/sequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/sequences/</guid>
      <description>Sequences in YAML are denoted by a series of dashes (&amp;lsquo;-&amp;rsquo;) and parsed as a list in python.
Validating sequences of a particular type can be done with the Seq validator, specifying the type.
See also UniqueSeq and FixedSeq for other types of sequence validation.
Example yaml_snippet:
-1-2-3from strictyaml import Seq, Str, Int, load from ensure import Ensure Valid Parsed:
Ensure(load(yaml_snippet, Seq(Str()))).equals([&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, ]) Is sequence:
assert load(yaml_snippet, Seq(Str())).is_sequence() Iterator:</description>
    </item>
    
    <item>
      <title>Sequences of unique items (UniqueSeq)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/sequences-of-unique-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/sequences-of-unique-items/</guid>
      <description>UniqueSeq validates sequences which contain no duplicate values.
Example yaml_snippet:
-A-B-Cfrom strictyaml import UniqueSeq, Str, load, as_document from ensure import Ensure schema = UniqueSeq(Str()) Valid:
Ensure(load(yaml_snippet, schema)).equals([&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, ]) Parsing with one dupe raises an exception:
-A-B-Bload(yaml_snippet, schema)strictyaml.exceptions.YAMLValidationError: while parsing a sequence in &amp;#34;&amp;lt;unicode string&amp;gt;&amp;#34;, line 1, column 1: - A ^ (line: 1) duplicate found in &amp;#34;&amp;lt;unicode string&amp;gt;&amp;#34;, line 3, column 1: - B ^ (line: 3) Parsing all dupes raises an exception:</description>
    </item>
    
    <item>
      <title>Updating document with a schema</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/update/</guid>
      <description>When StrictYAML loads a document with a schema, it checks that future updates to that document follow the original schema.
import strictyaml as s from ensure import Ensure GitHub #72:
doc = s.load(&amp;#39;a: 9&amp;#39;, s.Map({ &amp;#39;a&amp;#39;: s.Str(), s.Optional(&amp;#39;b&amp;#39;): s.Int(), })) doc[&amp;#39;b&amp;#39;] = 9 assert doc[&amp;#39;b&amp;#39;] == 9 Works on empty mapping:
doc = s.load(&amp;#39;&amp;#39;, s.EmptyDict() | s.Map({ &amp;#39;a&amp;#39;: s.Int(), })) doc[&amp;#39;a&amp;#39;] = 9 assert doc[&amp;#39;a&amp;#39;] == 9, doc.as_yaml() Works on complex types:</description>
    </item>
    
    <item>
      <title>Using a YAML object of a parsed mapping</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/mapping-yaml-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/mapping-yaml-object/</guid>
      <description>When a YAML document with mappings is parsed, it is not parsed as a dict but as a YAML object which behaves very similarly to a dict, but with some extra capabilities.
You can use .items(), .keys(), .values(), look up items with square bracket notation, .get(key, with_default_if_nonexistent) and use &amp;ldquo;x in y&amp;rdquo; notation to determine key membership.
To retrieve the equivalent dict (containing just other dicts, lists and strings/ints/etc.) use .</description>
    </item>
    
    <item>
      <title>Validating optional keys in mappings (Map)</title>
      <link>https://hitchdev.com/strictyaml/using/alpha/compound/optional-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/using/alpha/compound/optional-keys/</guid>
      <description>Not every key in a YAML mapping will be required. If you use the &amp;ldquo;Optional(&amp;lsquo;key&amp;rsquo;)&amp;rdquo; validator with YAML, you can signal that a key/value pair is not required.
from strictyaml import Map, Int, Str, Bool, Optional, load from ensure import Ensure schema = Map({&amp;#34;a&amp;#34;: Int(), Optional(&amp;#34;b&amp;#34;): Bool(), }) Valid example 1:
a:1b:yesEnsure(load(yaml_snippet, schema)).equals({&amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: True}) Valid example 2:
a:1b:noEnsure(load(yaml_snippet, schema)).equals({&amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: False}) Valid example missing key:
a:1Ensure(load(yaml_snippet, schema)).equals({&amp;#34;a&amp;#34;: 1}) Invalid 1:</description>
    </item>
    
  </channel>
</rss>
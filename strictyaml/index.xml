<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>StrictYAML on HitchDev</title>
    <link>https://hitchdev.com/strictyaml/</link>
    <description>Recent content in StrictYAML on HitchDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hitchdev.com/strictyaml/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hitchdev.com/strictyaml/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/changelog/</guid>
      <description>Changelog Latest No relevant code changes.
1.0.5  BUGFIX : Fixed python 2 bug introduced when fixing #72. BUG: issue #72. Now setitem uses schema.  Before this commit, schemas could be violated when assigning to Map/Sequence members. Now, modifications to the data must fit the data&amp;rsquo;s schema.
Furthermore, if the node on which setitem is called has a compound schema, the selected validator within the compound schema may change correctly.</description>
    </item>
    
    <item>
      <title>What YAML features does StrictYAML remove?</title>
      <link>https://hitchdev.com/strictyaml/features-removed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/features-removed/</guid>
      <description>StrictYAML restricts you from parsing a number of things which the YAML specification says should be parsed. An issue has been raised by David Seaward about this critique on the official YAML repository.
This document lists those of those features:
Implicit Typing (Why?) x:yesy:null Example pyyaml/ruamel/poyo:
load(yaml) == {&amp;#34;x&amp;#34;: True, &amp;#34;y&amp;#34;: None}  Example StrictYAML without schema:
load(yaml) == {&amp;#34;x&amp;#34;: &amp;#34;yes&amp;#34;, &amp;#34;y&amp;#34;: &amp;#34;null&amp;#34;} Example StrictYAML with schema:
load(yaml, Map({&amp;#34;x&amp;#34;: Bool(), &amp;#34;y&amp;#34;: Str()})) == {&amp;#34;x&amp;#34;: True, &amp;#34;y&amp;#34;: &amp;#34;null&amp;#34;} Direct representations of objects (Why?</description>
    </item>
    
    <item>
      <title>What is YAML?</title>
      <link>https://hitchdev.com/strictyaml/what-is-yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/what-is-yaml/</guid>
      <description>YAML is a simple, human readable format for representing associative and hierarchical data.
Example from wikipedia page on YAML:
receipt:Oz-WarePurchaseInvoicedate:2012-08-06customer:firstname:Harryfamilyname:Potteraddress:|-4PrivetDrive,LittleWhinging,Englanditems:-part_no:A4786description:WaterBucket(Filled)price:1.47quantity:4-part_no:E1628description:HighHeeled&amp;#34;Ruby&amp;#34;Slipperssize:8price:133.7quantity:1 Key features:
 Things which are associated with other things - delimited by the colon (:). Ordered lists of things - delimited by the prepended dash (-). Multi-line strings - delimited by the bar (|) if there is another newline at the end of the string, or bar + dash (|-) if not.</description>
    </item>
    
    <item>
      <title>When should I use a validator and when should I not?</title>
      <link>https://hitchdev.com/strictyaml/when-to-use-validators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitchdev.com/strictyaml/when-to-use-validators/</guid>
      <description>When starting out on greenfield projects it&amp;rsquo;s much quicker not to create a validator. In such cases it&amp;rsquo;s often more prudent to just parse the YAML and convert the strings explicitly on the fly (e.g. int(yaml[&amp;lsquo;key&amp;rsquo;])).
If the YAML is also going to be largely under the control of the developer it also might not make sense to write a validator either.
If you have written software that is going to parse YAML from a source you do not control - especially by somebody who might make a mistake - then it probably does make sense to write a validator.</description>
    </item>
    
  </channel>
</rss>